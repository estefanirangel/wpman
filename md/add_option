add option "MAY 2013" WordPress Codex "Function Reference"
==========================================================

NAME
----

add option - A safe way of adding a named option/value pair to the options database

SYNOPSIS
--------

A safe way of adding a named option/value pair to the options database
table. It does nothing if the option already exists. After the option is
saved, it can be accessed with
[get\_option()](/Function_Reference/get_option "Function Reference/get option"),
changed with
[update\_option()](/Function_Reference/update_option "Function Reference/update option"),
and deleted with
[delete\_option()](/Function_Reference/delete_option "Function Reference/delete option").

You do not need to serialize values. If the value needs to be
serialized, then it will be serialized before it is inserted into the
database. You can create options without values and then add values
later.

Calling `add_option` first checks whether the option has already been
added, and returns false if an option with the same name exists. Next,
it checks to make sure the option name is not one of the protected names
*alloptions* or *notoptions*, and dies with an error message if
attempting to overwrite a protected option. If the option name is not
protected, and does not already exist, the option will be created.

***Note:*** *`add_option` uses `get_option` to determine whether the
option already exists, and since `get_option` returns **false** as the
default value, if you set an option to **false** in the database (e.g.
via `update_option($option_name, false)`), then a subsequent call to
`add_option` will change the value, because it will seem to `add_option`
that the option does **not** exist.*

### vs. update\_option()

If you are trying to ensure that a given option is created, use
[update\_option()](/Function_Reference/update_option "Function Reference/update option")
instead, which bypasses the option name check and updates the option
with the desired value whether or not it exists.

USAGE
-----

` <?php add_option( $option, $value, $deprecated, $autoload ); ?> `

PARAMETERS
----------

 `$option` 
:   ([*string*](/How_to_Pass_Tag_Parameters#String "How to Pass Tag Parameters"))
    (*required*) Name of the option to be added. Use underscores to
    separate words, and do not use uppercase—this is going to be placed
    into the database.
    Default: *None*

 `$value` 
:   ([*mixed*](/How_to_Pass_Tag_Parameters#Mixed "How to Pass Tag Parameters"))
    (*optional*) Value for this option name. Limited to 2\^32 bytes of
    data
    Default: *Empty*

 `$deprecated` 
:   ([*string*](/How_to_Pass_Tag_Parameters#String "How to Pass Tag Parameters"))
    (*optional*) Deprecated in WordPress [Version
    2.3](/Version_2.3 "Version 2.3").
    Default: *Empty*

 `$autoload` 
:   ([*string*](/How_to_Pass_Tag_Parameters#String "How to Pass Tag Parameters"))
    (*optional*) Should this option be automatically loaded by the
    function
    [wp\_load\_alloptions()](/Function_Reference/wp_load_alloptions "Function Reference/wp load alloptions")
    (puts options into object cache on each page load)? Valid values:
    **yes** or **no**.
    Default: yes

RETURN VALUE
------------

 `` `(boolean)`{style="color:gray"} 
:   False if option was not added and true if option was added

EXAMPLE
-------

    <?php add_option( 'myhack_extraction_length', '255', '', 'yes' ); ?>

CHANGE LOG
----------

Since: [1.0.0](/Version_1.0 "Version 1.0")

SOURCE FILE
-----------

`add_option()` is located in `wp-includes/option.php`.

