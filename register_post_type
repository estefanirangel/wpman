<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<!--
<meta property="fb:page_id" content="6427302910" />
-->
<link href="https://plus.google.com/107188080561309681193" rel="publisher" />
<meta name="google-site-verification" content="7VWES_-rcHBcmaQis9mSYamPfNwE03f4vyTj4pfuAw0" />
<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15.5" />
		<meta name="keywords" content="Function Reference/register post type,Custom Post Types,Function Reference,Function Reference/add meta box,Function Reference/add post type support,Function Reference/flush rewrite rules,Function Reference/get post type,Function Reference/get post type capabilities,Function Reference/get post type labels,Function Reference/get post type object,Function Reference/get post types" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Codex (en)" />
		<link rel="alternate" type="application/rss+xml" title="Codex RSS feed" href="/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Codex Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<title>Function Reference/register post type &laquo; WordPress Codex</title>

<link rel="stylesheet" href="//wordpress.org/style/codex-wp4.css?3" />
<link href='//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,400,300,600&subset=latin,cyrillic-ext,greek-ext,greek,vietnamese,latin-ext,cyrillic' rel='stylesheet' type='text/css'>
<link rel="stylesheet" href="//wordpress.org/style/wp4.css?35" />
<link media="only screen and (max-device-width: 480px)" href="//wordpress.org/style/iphone.css" type="text/css" rel="stylesheet" />
<link rel="shortcut icon" href="//wordpress.org/favicon.ico?3" type="image/x-icon" />


<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-52447-1");
pageTracker._initData();
pageTracker._trackPageview();
function recordOutboundLink(link, category, action) {
  pageTracker._trackEvent(category, action);
  setTimeout('document.location = "' + link.href + '"', 100);
}
</script>
<!--[if lte IE 8]>
<style type="text/css">
@import url("//wordpress.org/style/ie.css?1");
</style>
<![endif]-->
	<script type="text/javascript" src="//wordpress.org/wp-includes/js/jquery/jquery.js"></script>
<script>document.cookie='devicePixelRatio='+((window.devicePixelRatio === undefined) ? 1 : window.devicePixelRatio)+'; path=/';</script>
<!--[if IE]>
    <script type="text/javascript" src="/skins/common/IEFixes.js"></script>
    <meta http-equiv="imagetoolbar" content="no" />
<![endif]-->

<script type="text/javascript" src="/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=codex"></script>
<script type="text/javascript">wgBreakFrames=false;wgContentLanguage='en';</script>
<script type="text/javascript" src="/skins/common/wikibits.js"></script>

</head>

<body id="wordpress-org"  >
<div id="header">
	<div class="wrapper">
		<h1><a href="//wordpress.org">WordPress.org</a></h1>				<div id="head-search">
		<form action="http://wordpress.org/search/do-search.php" method="get">
			<input class="text" name="search" type="text" value="" maxlength="150" placeholder="Search WordPress.org" /> <input type="submit" class="button" value="" />
		</form>
		</div>
				<div style="clear:both"></div>
		
<ul>
<li><a href='http://wordpress.org/showcase/' title='See some of the sites built on WordPress.'>Showcase</a></li>
<li><a href='http://wordpress.org/extend/themes/' title='Find just the right look for your website.'>Themes</a></li>
<li><a href='http://wordpress.org/extend/plugins/' title='Plugins can extend WordPress to do almost anything you can imagine.'>Plugins</a></li>
<li><a href='http://wordpress.org/extend/mobile/' title='Take your website on the go!'>Mobile</a></li>
<li><a href='http://wordpress.org/support/' title='Forums, documentation, help.' class="current">Support</a><ul class="nav-submenu"><li><a href='http://wordpress.org/support/' title='Support and discussion forums.'>Forums</a></li><li><a href='http://codex.wordpress.org/Main_Page' title='Documentation, tutorials, best practices.'>Documentation</a></li></ul><div class="uparrow"></div></li>
<li><a href='http://make.wordpress.org/' title='Contribute your knowledge.'>Get Involved</a><ul class="nav-submenu"><li><a href='http://make.wordpress.org/core/' title='Write the code.'>Core</a></li><li><a href='http://make.wordpress.org/ui/' title='Improve the interface.'>UI</a></li><li><a href='http://make.wordpress.org/accessibility/' title='Create a better experience.'>Accessibility</a></li><li><a href='http://make.wordpress.org/plugins/' title='Extend the system.'>Plugins</a></li><li><a href='http://make.wordpress.org/themes/' title='Beautify the web.'>Themes</a></li><li><a href='http://make.wordpress.org/support/' title='Help the users.'>Support</a></li><li><a href='http://make.wordpress.org/polyglots/' title='Translate for the world.'>Polyglots</a></li><li><a href='http://make.wordpress.org/mobile/' title='On the go.'>Mobile</a></li></ul><div class="uparrow"></div></li>
<li><a href='http://wordpress.org/about/' title='About the WordPress Organization, and where we&#039;re going.'>About</a></li>
<li><a href='http://wordpress.org/news/' title='Come here for the latest scoop.'>Blog</a></li>
<li><a href='http://wordpress.org/hosting/' title='Find a home for your blog.'>Hosting</a></li>
<li id="download" class="button download-button"><a href='http://wordpress.org/download/' title='Get it. Got it? Good.'>Download WordPress</a></li>
</ul>
		<div style="clear:both"></div>
	</div>
</div>


<div id="headline">
	<div class="wrapper">
		<h2>Codex</h2>
		
		<div class="portlet" id="p-personal">
		  <p class="login">Codex tools:
		     <a href="/index.php?title=Special:UserLogin&amp;returnto=Function_Reference/register_post_type">Log in</a> 		  </p>
		</div>
	</div>
</div>

<div id="pagebody">
	<div class="wrapper">	
		<div class="col-10" id="bodyContent">
						<h2 class="pagetitle">Function Reference/register post type</h2>
									<!-- start content -->
				<p class="LanguageLinks" style="border:1px solid #CCCCCC; line-height:1.5; text-align:left; color:#333333; font-size:90%; padding:10px;"><span style="white-space:nowrap;"><a href="/Multilingual_Codex" title="Multilingual Codex" class="mw-redirect">Languages</a>:</span> 
<strong class="selflink">English</strong> • 
<a href="/zh-cn:%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/register_post_type" title="zh-cn:函数参考/register post type">中文(简体)</a> • 
<a href="http://wpdocs.sourceforge.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/register_post_type" class="external text" title="http://wpdocs.sourceforge.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/register_post_type">日本語</a> • 
 <small>(<a href="/Multilingual_Codex#Language_Cross_Reference" title="Multilingual Codex" class="mw-redirect">Add your language</a>)</small>
</p>
<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Taxonomies"><span class="tocnumber">2</span> <span class="toctext">Taxonomies</span></a>
<ul>
<li class="toclevel-2"><a href="#Reserved_Post_Types"><span class="tocnumber">2.1</span> <span class="toctext">Reserved Post Types</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Usage"><span class="tocnumber">3</span> <span class="toctext">Usage</span></a></li>
<li class="toclevel-1"><a href="#Parameters"><span class="tocnumber">4</span> <span class="toctext">Parameters</span></a>
<ul>
<li class="toclevel-2"><a href="#Arguments"><span class="tocnumber">4.1</span> <span class="toctext">Arguments</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Return_Values"><span class="tocnumber">5</span> <span class="toctext">Return Values</span></a></li>
<li class="toclevel-1"><a href="#Example"><span class="tocnumber">6</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1"><a href="#Flushing_Rewrite_on_Activation"><span class="tocnumber">7</span> <span class="toctext">Flushing Rewrite on Activation</span></a></li>
<li class="toclevel-1"><a href="#Notes"><span class="tocnumber">8</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1"><a href="#Change_Log"><span class="tocnumber">9</span> <span class="toctext">Change Log</span></a></li>
<li class="toclevel-1"><a href="#Source_File"><span class="tocnumber">10</span> <span class="toctext">Source File</span></a></li>
<li class="toclevel-1"><a href="#Resources"><span class="tocnumber">11</span> <span class="toctext">Resources</span></a>
<ul>
<li class="toclevel-2"><a href="#Generators"><span class="tocnumber">11.1</span> <span class="toctext">Generators</span></a></li>
<li class="toclevel-2"><a href="#Plugins"><span class="tocnumber">11.2</span> <span class="toctext">Plugins</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Related"><span class="tocnumber">12</span> <span class="toctext">Related</span></a></li>
</ul>
</td></tr></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Description" id="Description"></a><h2> <span class="mw-headline"> Description </span></h2>
<p>Create or modify a <a href="/Glossary#Post_Type" title="Glossary">post type</a>. Do not use <strong class="selflink">register_post_type</strong> before init.
</p>
<a name="Taxonomies" id="Taxonomies"></a><h2> <span class="mw-headline"> Taxonomies </span></h2>
<p>It's important to note, that you should in every way, always register your taxonomies using the <code>taxonomies</code> argument when you register your post type. Else they won't get recognized as connected when using filters like <code>parse_query</code> or <code>pre_get_posts</code>, which can lead to unexpected results and failure.
</p>
<a name="Reserved_Post_Types" id="Reserved_Post_Types"></a><h3> <span class="mw-headline"> Reserved Post Types </span></h3>
<p>The following post types are reserved and used by WordPress already.
</p>
<ul><li> post
</li><li> page
</li><li> attachment
</li><li> revision
</li><li> nav_menu_item
</li></ul>
<p>More information: <a href="/Post_Types" title="Post Types">Post Types</a>.
</p>
<a name="Usage" id="Usage"></a><h2> <span class="mw-headline"> Usage </span></h2>
<p><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php&nbsp;register_post_type</span><span style="color: #007700">(&nbsp;</span><span style="color: #0000BB">$post_type</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$args&nbsp;</span><span style="color: #007700">)&nbsp;</span><span style="color: #0000BB">?&gt;</span>
</span>
</code>
</p>
<a name="Parameters" id="Parameters"></a><h2> <span class="mw-headline"> Parameters </span></h2>
<dl><dt> <tt>$post_type</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#String" title="How to Pass Tag Parameters"><i>string</i></a>) (<i>required</i>) Post type. (<b>max. 20 characters, can not contain capital letters or spaces</b>)
<dl><dd> Default: <i>None</i>
</dd></dl>
</dd></dl>
<dl><dt> <tt>$args</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Array" title="How to Pass Tag Parameters"><i>array</i></a>) (<i>optional</i>) An array of arguments.
<dl><dd> Default: <i>None</i>
</dd></dl>
</dd></dl>
<a name="Arguments" id="Arguments"></a><h3> <span class="mw-headline"> Arguments </span></h3>
<dl><dt> <tt>label</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#String" title="How to Pass Tag Parameters"><i>string</i></a>) (<i>optional</i>) A <b>plural</b> descriptive name for the post type marked for translation.
<dl><dd> Default: $post_type
</dd></dl>
</dd></dl>
<dl><dt> <tt>labels</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Array" title="How to Pass Tag Parameters"><i>array</i></a>) (<i>optional</i>) labels - An array of labels for this post type. By default post labels are used for non-hierarchical types and page labels for hierarchical ones.
<dl><dd> Default: if empty, name is set to label value, and singular_name is set to name value
</dd></dl>
</dd></dl>
<p><span id="labeldescriptions">
</p>
<dl><dd><ul><li> '<b>name'</b> - general name for the post type, usually plural. The same as,  and overridden by $post_type_object-&gt;label
</li><li> '<b>singular_name'</b> - name for one object of this post type. Defaults to value of name
</li><li> '<b>menu_name'</b> - the menu name text.  This string is the name to give menu items.  Defaults to value of name
</li><li> '<b>all_items'</b> -  the all items text used in the menu.  Default is the Name label
</li><li> '<b>add_new'</b> -  the add new text.  The default is Add New for both hierarchical and non-hierarchical types. When internationalizing this string, please use a <a href="/I18n_for_WordPress_Developers#Disambiguation_by_context" title="I18n for WordPress Developers">gettext context</a> matching your post type. Example: <code>_x('Add New', 'product');</code>
</li><li> '<b>add_new_item'</b> -  the add new item text.  Default is Add New Post/Add New Page
</li><li> '<b>edit_item'</b> - the edit item text. Default is Edit Post/Edit Page
</li><li> '<b>new_item'</b> - the new item text.  Default is New Post/New Page
</li><li> '<b>view_item'</b> - the view item text.  Default is View Post/View Page
</li><li> '<b>search_items'</b> - the search items text. Default is Search Posts/Search Pages
</li><li> '<b>not_found'</b> - the not found text. Default is No posts found/No pages found
</li><li> '<b>not_found_in_trash'</b> - the not found in trash text. Default is No posts found in Trash/No pages found in Trash
</li><li> '<b>parent_item_colon'</b> - the parent text.  This string isn't used on non-hierarchical types. In hierarchical ones the default is Parent Page
</li></ul>
</dd></dl>
<dl><dt> <tt>description</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#String" title="How to Pass Tag Parameters"><i>string</i></a>) (<i>optional</i>) A short descriptive summary of what the post type is.
<dl><dd> Default: blank
</dd></dl>
</dd></dl>
<dl><dt> <tt>public</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>optional</i>) Whether a post type is intended to be used publicly either via the admin interface or by front-end users.
<dl><dd> Default: false
</dd></dl>
<ul><li> '<b>false'</b> - Post type is not intended to be used publicly and should generally be unavailable in wp-admin and on the front end unless explicitly planned for elsewhere.
</li><li> '<b>true'</b> - Post type <b>is</b> intended for public use. This includes on the front end and in wp-admin.
</li></ul>
</dd><dd> <b>Note:</b> While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention.
</dd></dl>
<dl><dt> <tt>exclude_from_search</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>importance</i>) Whether to exclude posts with this post type from front end search results.
<dl><dd> Default: value of the opposite of the public argument
</dd></dl>
<ul><li> 'true' - site/?s=search-term will <b>not</b> include posts of this post type.
</li><li> 'false' - site/?s=search-term will include posts of this post type.
</li></ul>
</dd><dd>
</dd><dd> <b>Note:</b> If you want to show the posts's list that are associated to taxonomy's terms, you must set exclude_from_search to false (ie&nbsp;: for call site_domaine/?taxonomy_slug=term_slug or site_domaine/taxonomy_slug/term_slug). If you set to true, on the taxonomy page (ex: taxonomy.php) worpress will not find your posts and/or pagination will make 404 error...
</dd></dl>
<dl><dt> <tt>publicly_queryable</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>optional</i>) Whether queries can be performed on the front end as part of parse_request().
<dl><dd> Default: value of public argument
</dd></dl>
</dd><dd> <b>Note:</b> The queries affected include the following (also initiated when rewrites are handled)
<ul><li>&nbsp;?post_type={post_type_key}
</li><li>&nbsp;?{post_type_key}={single_post_slug}
</li><li>&nbsp;?{post_type_query_var}={single_post_slug}
</li></ul>
</dd></dl>
<dl><dd> <b>Note:</b> If you set this to FALSE, you will find that you cannot preview/see your custom post (return 404).
</dd></dl>
<dl><dt> <tt>show_ui</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>optional</i>) Whether to generate a default UI for managing this post type in the admin.
<dl><dd> Default: value of public argument
</dd></dl>
<ul><li> 'false' - do not display a user-interface for this post type
</li><li> 'true' - display a user-interface (admin panel) for this post type
</li></ul>
</dd><dd> Note: <tt>_built-in</tt> post types, such as post and page, are intentionally set to false.
</dd></dl>
<dl><dt> <tt>show_in_nav_menus</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>optional</i>) Whether post_type is available for selection in navigation menus.
<dl><dd> Default: value of public argument
</dd></dl>
</dd></dl>
<dl><dt> <tt>show_in_menu</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean_or_string" title="How to Pass Tag Parameters"><i>boolean or string</i></a>) (<i>optional</i>) Where to show the post type in the admin menu. <tt>show_ui</tt> must be <tt>true</tt>.
<dl><dd> Default: value of show_ui argument
</dd></dl>
<ul><li> 'false' - do not display in the admin menu
</li><li> 'true' - display as a top level menu
</li><li> 'some string' - If an existing top level page such as 'tools.php' or 'edit.php?post_type=page', the post type will be placed as a sub menu of that.
</li></ul>
</dd><dd> Note: When using 'some string' to show as a submenu of a menu page created by a plugin, this item will become the first submenu item, and replace the location of the top level link. If this isn't desired, the plugin that creates the menu page needs to set the add_action priority for admin_menu to 9 or lower.
</dd><dd> Note: As this one inherits its value from <tt>show_ui</tt>, which inherits its value from <tt>public</tt>, it seems to be the most reliable property to determine, if a post type is meant to be publicly useable. At least this works for <tt>_builtin</tt> post types and only gives back <tt>post</tt> and <tt>page</tt>.
</dd></dl>
<dl><dt> <tt>show_in_admin_bar</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>optional</i>) Whether to make this post type available in the WordPress admin bar.
<dl><dd> Default: value of the show_in_menu argument
</dd></dl>
</dd></dl>
<dl><dt> <tt>menu_position</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Integer" title="How to Pass Tag Parameters"><i>integer</i></a>) (<i>optional</i>) The position in the menu order the post type should appear. <tt>show_in_menu</tt> must be <tt>true</tt>.
<dl><dd> Default: null - defaults to below Comments
</dd></dl>
<ul><li> 5  - below Posts
</li><li> 10 - below Media
</li><li> 15 - below Links
</li><li> 20 - below Pages
</li><li> 25 - below comments
</li><li> 60 - below first separator
</li><li> 65 - below Plugins
</li><li> 70 - below Users
</li><li> 75 - below Tools
</li><li> 80 - below Settings
</li><li> 100 - below second separator
</li></ul>
</dd></dl>
<dl><dt> <tt>menu_icon</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#String" title="How to Pass Tag Parameters"><i>string</i></a>) (<i>optional</i>) The url to the icon to be used for this menu.
<dl><dd> Default: null - defaults to the posts icon
</dd></dl>
</dd></dl>
<dl><dt> <tt>capability_type</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#String_or_array" title="How to Pass Tag Parameters"><i>string or array</i></a>) (<i>optional</i>) The string to use to build the read, edit, and delete capabilities. May be passed as an array to allow for alternative plurals when using this argument as a base to construct the capabilities, e.g. array('story', 'stories').  By default the capability_type is used as a base to construct capabilities. It seems that `map_meta_cap` needs to be set to true, to make this work.
<dl><dd> Default: "post"
</dd></dl>
</dd></dl>
<dl><dd> Some of the capability types that can be used (probably not exhaustive list):
<ul><li> post (default)
</li><li> page 
</li></ul>
</dd></dl>
<dl><dd> These built-in types cannot be used:
<ul><li> attachment
</li><li> mediapage
</li></ul>
</dd></dl>
<dl><dt> <tt>capabilities</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Array" title="How to Pass Tag Parameters"><i>array</i></a>) (<i>optional</i>) An array of the capabilities for this post type.
<dl><dd> Default: capability_type is used to construct
</dd></dl>
</dd><dd> By default, seven keys are accepted as part of the capabilities array:
<ul><li> edit_post, read_post, and delete_post - These three are <b>meta capabilities</b>, which are then generally mapped to corresponding <b>primitive capabilities</b> depending on the context, for example the post being edited/read/deleted and the user or role being checked. Thus these capabilities would generally not be granted directly to users or roles.
</li><li> edit_posts - Controls whether objects of this post type can be edited.
</li><li>  edit_others_posts - Controls whether objects of this type owned by other users can be edited. If the post type does not support an author, then this will behave like edit_posts.
</li><li> publish_posts - Controls publishing objects of this post type.
</li><li> read_private_posts - Controls whether private objects can be read.
</li></ul>
</dd><dd> Note: those last four <b>primitive capabilities</b> are checked in core in various locations.
</dd></dl>
<dl><dd> There are also seven other <b>primitive capabilities</b> which are not referenced directly in core, except in map_meta_cap(), which takes the three aforementioned <b>meta capabilities</b> and translates them into one or more <b>primitive capabilities</b> that must then be checked against the user or role, depending on the context.  These additional capabilities are only used in map_meta_cap(). Thus, they are only assigned by default if the post type is registered with the 'map_meta_cap' argument set to true (default is false).
<ul><li> read - Controls whether objects of this post type can be read.
</li><li> delete_posts - Controls whether objects of this post type can be deleted.
</li><li> delete_private_posts - Controls whether private objects can be deleted.
</li><li> delete_published_posts - Controls whether published objects can be deleted.
</li><li> delete_others_posts - Controls whether objects owned by other users can be  can be deleted. If the post type does not support an author, then this will behave like delete_posts.
</li><li> edit_private_posts - Controls whether private objects can be edited.
</li><li> edit_published_posts - Controls whether published objects can be edited.
</li></ul>
</dd></dl>
<p>If you assign a <tt>'capability_type'</tt> and then take a look into the <tt>$GLOBALS['wp_post_types']['your_cpt_name']</tt> array, then you'll see the following:
</p>
<pre>
[cap] =&gt; stdClass Object
(
	[edit_post]		 =&gt; &quot;edit_{$capability_type}&quot;
	[read_post]		 =&gt; &quot;read_{$capability_type}&quot;
	[delete_post]		 =&gt; &quot;delete_{$capability_type}&quot;
	[edit_posts]		 =&gt; &quot;edit_{$capability_type}s&quot;
	[edit_others_posts]	 =&gt; &quot;edit_others_{$capability_type}s&quot;
	[publish_posts]		 =&gt; &quot;publish_{$capability_type}s&quot;
	[read_private_posts]	 =&gt; &quot;read_private_{$capability_type}s&quot;
        [delete_posts]           =&gt; &quot;delete_{$capability_type}s&quot;
        [delete_private_posts]   =&gt; &quot;delete_private_{$capability_type}s&quot;
        [delete_published_posts] =&gt; &quot;delete_published_{$capability_type}s&quot;
        [delete_others_posts]    =&gt; &quot;delete_others_{$capability_type}s&quot;
        [edit_private_posts]     =&gt; &quot;edit_private_{$capability_type}s&quot;
        [edit_published_posts]   =&gt; &quot;edit_published_{$capability_type}s&quot;
)
</pre>
<p><i>Note the "s" at the end of plural capabilities.</i>
</p>
<dl><dt> <tt>map_meta_cap</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>optional</i>) Whether to use the internal default meta capability handling.
<dl><dd> Default: false
</dd></dl>
</dd></dl>
<dl><dt> <tt>hierarchical</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>optional</i>) Whether the post type is hierarchical (e.g. page). Allows Parent to be specified. The 'supports' parameter should contain 'page-attributes' to show the parent select box on the editor page.
<dl><dd> Default: false
</dd></dl>
</dd></dl>
<dl><dt> <tt>supports</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Array.2Fboolean" title="How to Pass Tag Parameters"><i>array/boolean</i></a>) (<i>optional</i>) An alias for calling <a href="/Function_Reference/add_post_type_support" title="Function Reference/add post type support">add_post_type_support()</a> directly. As of <a href="/Version_3.5" title="Version 3.5">3.5</a>, boolean <strong>false</strong> can be passed as value instead of an array to prevent default (title and editor) behavior.
<dl><dd> Default: title and editor
</dd></dl>
<ul><li> 'title'
</li><li> 'editor' (content)
</li><li> 'author'
</li><li> 'thumbnail' (featured image, current theme must also support <a href="/Post_Thumbnails" title="Post Thumbnails">post-thumbnails</a>)
</li><li> 'excerpt'
</li><li> 'trackbacks'
</li><li> 'custom-fields'
</li><li> 'comments' (also will see comment count balloon on edit screen)
</li><li> 'revisions' (will store revisions)
</li><li> 'page-attributes' (menu order, hierarchical must be true to show Parent option)
</li><li> 'post-formats' add post formats, see <a href="/Post_Formats" title="Post Formats">Post Formats</a>
</li></ul>
</dd></dl>
<dl><dd> <b>Note:</b> When you use custom post type that use thumbnails remember to check that the theme also supports thumbnails or use <a href="/add_theme_support" title="add theme support" class="mw-redirect">add_theme_support</a> function.
</dd></dl>
<dl><dt> <tt>register_meta_box_cb</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#String" title="How to Pass Tag Parameters"><i>string</i></a>) (<i>optional</i>) Provide a callback function that will be called when setting up the meta boxes for the edit form. Do <a href="/Function_Reference/remove_meta_box" title="Function Reference/remove meta box">remove_meta_box()</a> and <a href="/Function_Reference/add_meta_box" title="Function Reference/add meta box">add_meta_box()</a> calls in the callback.
<dl><dd> Default: <i>None</i>
</dd></dl>
</dd></dl>
<dl><dt> <tt>taxonomies</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Array" title="How to Pass Tag Parameters"><i>array</i></a>) (<i>optional</i>) An array of registered taxonomies like <code>category</code> or <code>post_tag</code> that will be used with this post type. This can be used in lieu of calling <a href="/Function_Reference/register_taxonomy_for_object_type" title="Function Reference/register taxonomy for object type">register_taxonomy_for_object_type()</a> directly.  Custom taxonomies still need to be registered with <a href="/Function_Reference/register_taxonomy" title="Function Reference/register taxonomy">register_taxonomy()</a>.
<dl><dd> Default: no taxonomies
</dd></dl>
</dd></dl>
<dl><dt> <tt>has_archive</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean_or_string" title="How to Pass Tag Parameters"><i>boolean or string</i></a>) (<i>optional</i>) Enables post type archives. Will use <tt>$post_type</tt> as archive slug by default.
<dl><dd> Default: false
</dd></dl>
</dd><dd> Note: Will generate the proper rewrite rules if <tt>rewrite</tt> is enabled. Also use <tt>rewrite</tt> to change the slug used.
</dd></dl>
<dl><dt> <tt>permalink_epmask</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#String" title="How to Pass Tag Parameters"><i>string</i></a>) (<i>optional</i>) The default rewrite endpoint bitmasks. For more info see <a href="http://core.trac.wordpress.org/ticket/12605" class="external text" title="http://core.trac.wordpress.org/ticket/12605">Trac Ticket 12605</a> and <a href="http://make.wordpress.org/plugins/2012/06/07/rewrite-endpoints-api/" class="external text" title="http://make.wordpress.org/plugins/2012/06/07/rewrite-endpoints-api/">this Make WordPress Plugins summary of endpoints</a>.
<dl><dd> Default: EP_PERMALINK
</dd></dl>
</dd><dd> <b>Note:</b> In 3.4, this argument is effectively replaced by the <tt>'ep_mask'</tt> argument under <tt>rewrite</tt>.
</dd></dl>
<dl><dt> <tt>rewrite</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean_or_array" title="How to Pass Tag Parameters"><i>boolean or array</i></a>) (<i>optional</i>) Triggers the handling of rewrites for this post type. To prevent rewrites, set to false.
<dl><dd> Default: true and use $post_type as slug
</dd></dl>
</dd><dd>$args array 
<ul><li> <tt>'slug' =&gt; string</tt> Customize the permastruct slug. Defaults to the <tt>$post_type</tt> value. Should be translatable.
</li><li> <tt>'with_front' =&gt; bool</tt> Should the permastruct be prepended with the front base. (example: if your permalink structure is /blog/, then your links will be: false-&gt;/news/, true-&gt;/blog/news/). Defaults to true
</li><li> <tt>'feeds' =&gt; bool</tt> Should a feed permastruct be built for this post type. Defaults to <tt>has_archive</tt> value.
</li><li> <tt>'pages' =&gt; bool</tt> Should the permastruct provide for pagination. Defaults to true
</li><li> <tt>'ep_mask' =&gt; const</tt> <i>As of 3.4</i> Assign an endpoint mask for this post type. For more info see <a href="http://core.trac.wordpress.org/ticket/19275" class="external text" title="http://core.trac.wordpress.org/ticket/19275">Trac Ticket 19275</a> and <a href="https://make.wordpress.org/plugins/2012/06/07/rewrite-endpoints-api/" class="external text" title="https://make.wordpress.org/plugins/2012/06/07/rewrite-endpoints-api/">this Make WordPress Plugins summary of endpoints</a>.
<ul><li> If not specified and <tt>permalink_epmask</tt> is set, inherits from <tt>permalink_epmask</tt>
</li><li> If not specified and <tt>permalink_epmask</tt> is not set, defaults to <tt>EP_PERMALINK</tt>
</li></ul>
</li></ul>
</dd><dd> <b>Note:</b> If registering a post type inside of a plugin, call <a href="/Function_Reference/flush_rewrite_rules" title="Function Reference/flush rewrite rules">flush_rewrite_rules()</a> in your activation and deactivation hook (see <a href="#Flushing_Rewrite_on_Activation" title="">Flushing Rewrite on Activation</a> below). If flush_rewrite_rules() is not used, then you will have to manually go to Settings &gt; Permalinks and refresh your permalink structure before your custom post type will show the correct structure.
</dd></dl>
<dl><dt> <tt>query_var</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean_or_string" title="How to Pass Tag Parameters"><i>boolean or string</i></a>) (<i>optional</i>) Sets the <tt>query_var</tt> key for this post type.
<dl><dd> Default: true - set to $post_type
</dd></dl>
<ul><li> 'false' - Disables <tt>query_var</tt> key use. A post type cannot be loaded at /?{query_var}={single_post_slug}
</li><li> 'string' - /?{query_var_string}={single_post_slug} will work as intended.
</li></ul>
</dd></dl>
<dl><dd><b>Note:</b> The query_var parameter has no effect if the ‘publicly_queryable’ parameter is set to false. query_var adds the custom post type’s query var to the built-in query_vars array so that WordPress will recognize it. WordPress removes any query var not included in that array.
</dd></dl>
<dl><dd>If set to true it allow you to request a custom posts type (book) using this: example.com/?book=life-of-pi<br />
</dd><dd>If set to a string rather than true (for example ‘publication’), you can do: example.com/?publication=life-of-pi
</dd></dl>
<p><br />
</p>
<dl><dt> <tt>can_export</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>optional</i>) Can this post_type be exported.
<dl><dd> Default: true
</dd></dl>
</dd></dl>
<dl><dt> <tt>_builtin</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>not for general use</i>) Whether this post type is a native or "built-in" post_type. <b>Note: this Codex entry is for documentation - core developers recommend you don't use this when registering your own post type</b>
<dl><dd> Default: false
</dd></dl>
<ul><li> 'false' - default this is a custom post type
</li><li> 'true' - this is a built-in native post type (post, page, attachment, revision, nav_menu_item)
</li></ul>
</dd></dl>
<dl><dt> <tt>_edit_link</tt>
</dt><dd> (<a href="/How_to_Pass_Tag_Parameters#Boolean" title="How to Pass Tag Parameters"><i>boolean</i></a>) (<i>not for general use</i>) Link to edit an entry with this post type. <b>Note: this Codex entry is for documentation '-' core developers recommend you don't use this when registering your own post type</b>
<dl><dd> Default: 
</dd></dl>
<ul><li> 'post.php?post=%d'
</li></ul>
</dd></dl>
<a name="Return_Values" id="Return_Values"></a><h2> <span class="mw-headline"> Return Values </span></h2>
<dl><dt> (object | WP_Error)&nbsp;</dt><dd>  The registered post type object, or an error object
</dd></dl>
<a name="Example" id="Example"></a><h2> <span class="mw-headline"> Example </span></h2>
<p>An example of registering a post type called "book".
</p><p>Basic:
</p>
<pre>
function codex_custom_init() {
    $args = array( 'public' =&gt; true, 'label' =&gt; 'Books' );
    register_post_type( 'book', $args );
}
add_action( 'init', 'codex_custom_init' );
</pre>
<p>Elaborate:
</p>
<pre>
function codex_custom_init() {
  $labels = array(
    'name' =&gt; 'Books',
    'singular_name' =&gt; 'Book',
    'add_new' =&gt; 'Add New',
    'add_new_item' =&gt; 'Add New Book',
    'edit_item' =&gt; 'Edit Book',
    'new_item' =&gt; 'New Book',
    'all_items' =&gt; 'All Books',
    'view_item' =&gt; 'View Book',
    'search_items' =&gt; 'Search Books',
    'not_found' =&gt;  'No books found',
    'not_found_in_trash' =&gt; 'No books found in Trash', 
    'parent_item_colon' =&gt; '',
    'menu_name' =&gt; 'Books'
  );

  $args = array(
    'labels' =&gt; $labels,
    'public' =&gt; true,
    'publicly_queryable' =&gt; true,
    'show_ui' =&gt; true, 
    'show_in_menu' =&gt; true, 
    'query_var' =&gt; true,
    'rewrite' =&gt; array( 'slug' =&gt; 'book' ),
    'capability_type' =&gt; 'post',
    'has_archive' =&gt; true, 
    'hierarchical' =&gt; false,
    'menu_position' =&gt; null,
    'supports' =&gt; array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' )
  ); 

  register_post_type( 'book', $args );
}
add_action( 'init', 'codex_custom_init' );
</pre>
<p>Customizing the messages:
</p>
<pre>
//add filter to ensure the text Book, or book, is displayed when user updates a book 

function codex_book_updated_messages( $messages ) {
  global $post, $post_ID;

  $messages['book'] = array(
    0 =&gt; '', // Unused. Messages start at index 1.
    1 =&gt; sprintf( __('Book updated. &lt;a href=&quot;%s&quot;&gt;View book&lt;/a&gt;', 'your_text_domain'), esc_url( get_permalink($post_ID) ) ),
    2 =&gt; __('Custom field updated.', 'your_text_domain'),
    3 =&gt; __('Custom field deleted.', 'your_text_domain'),
    4 =&gt; __('Book updated.', 'your_text_domain'),
    /* translators:&nbsp;%s: date and time of the revision */
    5 =&gt; isset($_GET['revision'])&nbsp;? sprintf( __('Book restored to revision from&nbsp;%s', 'your_text_domain'), wp_post_revision_title( (int) $_GET['revision'], false ) )&nbsp;: false,
    6 =&gt; sprintf( __('Book published. &lt;a href=&quot;%s&quot;&gt;View book&lt;/a&gt;', 'your_text_domain'), esc_url( get_permalink($post_ID) ) ),
    7 =&gt; __('Book saved.', 'your_text_domain'),
    8 =&gt; sprintf( __('Book submitted. &lt;a target=&quot;_blank&quot; href=&quot;%s&quot;&gt;Preview book&lt;/a&gt;', 'your_text_domain'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),
    9 =&gt; sprintf( __('Book scheduled for: &lt;strong&gt;%1$s&lt;/strong&gt;. &lt;a target=&quot;_blank&quot; href=&quot;%2$s&quot;&gt;Preview book&lt;/a&gt;', 'your_text_domain'),
      // translators: Publish box date format, see http://php.net/date
      date_i18n( __( 'M j, Y @ G:i' ), strtotime( $post-&gt;post_date ) ), esc_url( get_permalink($post_ID) ) ),
    10 =&gt; sprintf( __('Book draft updated. &lt;a target=&quot;_blank&quot; href=&quot;%s&quot;&gt;Preview book&lt;/a&gt;', 'your_text_domain'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),
  );

  return $messages;
}
add_filter( 'post_updated_messages', 'codex_book_updated_messages' );
</pre>
<p>Adding contextual help:
</p>
<pre>
//display contextual help for Books

function codex_add_help_text( $contextual_help, $screen_id, $screen ) { 
  //$contextual_help .= var_dump( $screen ); // use this to help determine $screen-&gt;id
  if ( 'book' == $screen-&gt;id ) {
    $contextual_help =
      '&lt;p&gt;' . __('Things to remember when adding or editing a book:', 'your_text_domain') . '&lt;/p&gt;' .
      '&lt;ul&gt;' .
      '&lt;li&gt;' . __('Specify the correct genre such as Mystery, or Historic.', 'your_text_domain') . '&lt;/li&gt;' .
      '&lt;li&gt;' . __('Specify the correct writer of the book.  Remember that the Author module refers to you, the author of this book review.', 'your_text_domain') . '&lt;/li&gt;' .
      '&lt;/ul&gt;' .
      '&lt;p&gt;' . __('If you want to schedule the book review to be published in the future:', 'your_text_domain') . '&lt;/p&gt;' .
      '&lt;ul&gt;' .
      '&lt;li&gt;' . __('Under the Publish module, click on the Edit link next to Publish.', 'your_text_domain') . '&lt;/li&gt;' .
      '&lt;li&gt;' . __('Change the date to the date to actual publish this article, then click on Ok.', 'your_text_domain') . '&lt;/li&gt;' .
      '&lt;/ul&gt;' .
      '&lt;p&gt;&lt;strong&gt;' . __('For more information:', 'your_text_domain') . '&lt;/strong&gt;&lt;/p&gt;' .
      '&lt;p&gt;' . __('&lt;a href=&quot;http://codex.wordpress.org/Posts_Edit_SubPanel&quot; target=&quot;_blank&quot;&gt;Edit Posts Documentation&lt;/a&gt;', 'your_text_domain') . '&lt;/p&gt;' .
      '&lt;p&gt;' . __('&lt;a href=&quot;http://wordpress.org/support/&quot; target=&quot;_blank&quot;&gt;Support Forums&lt;/a&gt;', 'your_text_domain') . '&lt;/p&gt;'&nbsp;;
  } elseif ( 'edit-book' == $screen-&gt;id ) {
    $contextual_help = 
      '&lt;p&gt;' . __('This is the help screen displaying the table of books blah blah blah.', 'your_text_domain') . '&lt;/p&gt;'&nbsp;;
  }
  return $contextual_help;
}
add_action( 'contextual_help', 'codex_add_help_text', 10, 3 );
</pre>
<p>Adding WordPress 3.3+ Help Tab:
</p>
<pre>
function codex_custom_help_tab() {
	global $post_ID;
	$screen = get_current_screen();

	if( isset($_GET['post_type']) ) $post_type = $_GET['post_type'];
	else $post_type = get_post_type( $post_ID );

	if( $post_type == 'book' )&nbsp;:

		$screen-&gt;add_help_tab( array(
			'id' =&gt; 'you_custom_id', //unique id for the tab
			'title' =&gt; 'Custom  Help', //unique visible title for the tab
			'content' =&gt; '&lt;h3&gt;Help Title&lt;/h3&gt;&lt;p&gt;Help content&lt;/p&gt;',  //actual help text
		));

	endif;

}

add_action('admin_head', 'codex_custom_help_tab');
</pre>
<a name="Flushing_Rewrite_on_Activation" id="Flushing_Rewrite_on_Activation"></a><h2> <span class="mw-headline"> Flushing Rewrite on Activation </span></h2>
<p>To get permalinks to work when you activate the plugin use the following example, paying attention to how my_cpt_init is called in the register_activation_hook callback:
</p>
<pre>
add_action( 'init', 'my_cpt_init' );
function my_cpt_init() {
    register_post_type( ... );
}

function my_rewrite_flush() {
    // First, we &quot;add&quot; the custom post type via the above written function.
    // Note: &quot;add&quot; is written with quotes, as CPTs don't get added to the DB,
    // They are only referenced in the post_type column with a post entry, 
    // when you add a post of this CPT.
    my_cpt_init();

    // ATTENTION: This is *only* done during plugin activation hook in this example!
    // You should *NEVER EVER* do this on every page load!!
    flush_rewrite_rules();
}
register_activation_hook( __FILE__, 'my_rewrite_flush' );
</pre>
<p>For themes, you'll need to use the after_switch_theme hook instead. Like so:
</p>
<pre>
add_action( 'init', 'my_cpt_init' );
function my_cpt_init() {
    register_post_type( ... );
}

function my_rewrite_flush() {
    flush_rewrite_rules();
}
add_action( 'after_switch_theme', 'my_rewrite_flush' );
</pre>
<a name="Notes" id="Notes"></a><h2> <span class="mw-headline"> Notes </span></h2>
<p>Note that although the <b>$public</b> attribute is optional, the inputs passed to the <b>register_post_type()</b> function are <i>exactly</i> what is queried by the [<a href="http://codex.wordpress.org/Function_Reference/get_post_types" class="external text" title="http://codex.wordpress.org/Function_Reference/get_post_types">get_post_types()</a>] function.  So if you verbosely set the equivalent options for <b>publicly_queriable</b>, <b>show_ui</b>, <b>show_in_nav_menus</b>, and <b>exclude_from_search</b>, this will not be handled the same as if you had set the <b>$public</b> attribute. See <a href="http://core.trac.wordpress.org/ticket/18950" class="external text" title="http://core.trac.wordpress.org/ticket/18950">bug 18950</a>.
</p>
<a name="Change_Log" id="Change_Log"></a><h2> <span class="mw-headline"> Change Log </span></h2>
<ul><li> <a href="/Version_3.5" title="Version 3.5">3.5.0</a>: <tt>'supports'</tt> argument can be set to Boolean <tt>false</tt> to disable default title and editor.
</li><li> Since <a href="/Version_2.9" title="Version 2.9">2.9</a>
</li></ul>
<a name="Source_File" id="Source_File"></a><h2> <span class="mw-headline"> Source File </span></h2>
<p><tt>register_post_type()</tt> is located in <code><a href="http://core.trac.wordpress.org/browser/tags/3.5.1/wp-includes/post.php#L0" class="external text" title="http://core.trac.wordpress.org/browser/tags/3.5.1/wp-includes/post.php#L0">wp-includes/post.php</a></code>.
</p>
<a name="Resources" id="Resources"></a><h2> <span class="mw-headline"> Resources </span></h2>
<ul><li> <a href="/Custom_Post_Types" title="Custom Post Types" class="mw-redirect">Custom Post Types</a>
</li><li> <a href="http://core.trac.wordpress.org/ticket/12943" class="external text" title="http://core.trac.wordpress.org/ticket/12943">Feeds for Custom Post Types (Trac 12943)</a>
</li><li> <a href="http://lists.automattic.com/pipermail/wp-hackers/2010-June/032655.html" class="external text" title="http://lists.automattic.com/pipermail/wp-hackers/2010-June/032655.html">Discussion on wp-hackers about capabilities</a>
</li><li> <a href="http://lists.automattic.com/pipermail/wp-hackers/2010-June/032657.html" class="external text" title="http://lists.automattic.com/pipermail/wp-hackers/2010-June/032657.html">Another discussion on wp-hackers about capabilities</a>
</li><li> <a href="http://wpkrauts.com/2013/registering-custom-taxonomies-for-custom-post-types-the-right-way/" class="external text" title="http://wpkrauts.com/2013/registering-custom-taxonomies-for-custom-post-types-the-right-way/">Register Custom Post Types and Taxonomies the right way, so you have a reliable interconnection</a>
</li></ul>
<a name="Generators" id="Generators"></a><h3> <span class="mw-headline">Generators</span></h3>
<ul><li> <a href="http://generatewp.com/post-type/" class="external text" title="http://generatewp.com/post-type/">WordPress Post Type Generator</a>
</li><li> <a href="http://weareo3.com/wordpress-custom-post-type-generator/" class="external text" title="http://weareo3.com/wordpress-custom-post-type-generator/">Custom Post Type Generator</a>
</li><li> <a href="http://themergency.com/generators/wordpress-custom-post-types/" class="external text" title="http://themergency.com/generators/wordpress-custom-post-types/">Themergency Custom Post Type code generator</a>
</li></ul>
<a name="Plugins" id="Plugins"></a><h3> <span class="mw-headline">Plugins</span></h3>
<ul><li> <a href="http://wordpress.org/extend/plugins/types/" class="external text" title="http://wordpress.org/extend/plugins/types/">Types Plugin - Custom Post Types, Custom Taxonomy and Custom Fields</a> 
</li><li> <a href="http://wordpress.org/extend/plugins/custom-post-type-ui/" class="external text" title="http://wordpress.org/extend/plugins/custom-post-type-ui/">Custom Post Type UI Plugin</a> 
</li><li> <a href="http://wordpress.org/extend/plugins/cms-press/" class="external text" title="http://wordpress.org/extend/plugins/cms-press/">CMS Press</a> 
</li><li> <a href="http://wordpress.org/extend/plugins/gd-taxonomies-tools/" class="external text" title="http://wordpress.org/extend/plugins/gd-taxonomies-tools/">GD Custom Posts And Taxonomies Tools</a>
</li><li> <a href="http://wordpress.org/extend/plugins/post-types-order/" class="external text" title="http://wordpress.org/extend/plugins/post-types-order/">Change Order for Custom Post Types in WordPress 3.0</a>
</li><li> <a href="http://web-profile.com.ua/wordpress/custom-post-types/" class="external text" title="http://web-profile.com.ua/wordpress/custom-post-types/">Custom Post Type Example</a>
</li></ul>
<a name="Related" id="Related"></a><h2> <span class="mw-headline"> Related </span></h2>
<p><a href="/Post_Types" title="Post Types"><b>Post Types</b></a>: 
<strong class="selflink"> register_post_type()</strong>, 
<a href="/Function_Reference/add_post_type_support" title="Function Reference/add post type support"> add_post_type_support()</a>, 
<a href="/Function_Reference/remove_post_type_support" title="Function Reference/remove post type support"> remove_post_type_support()</a>, 
<a href="/Function_Reference/post_type_supports" title="Function Reference/post type supports"> post_type_supports()</a>, 
<a href="/Function_Reference/post_type_exists" title="Function Reference/post type exists"> post_type_exists()</a>, 
<a href="/Function_Reference/set_post_type" title="Function Reference/set post type"> set_post_type()</a>, 
<a href="/Function_Reference/get_post_type" title="Function Reference/get post type"> get_post_type()</a>, 
<a href="/Function_Reference/get_post_types" title="Function Reference/get post types"> get_post_types()</a>, 
<a href="/Function_Reference/get_post_type_object" title="Function Reference/get post type object"> get_post_type_object()</a>, 
<a href="/Function_Reference/get_post_type_capabilities" title="Function Reference/get post type capabilities"> get_post_type_capabilities()</a>, 
<a href="/Function_Reference/get_post_type_labels" title="Function Reference/get post type labels"> get_post_type_labels()</a>, 
<a href="/Function_Reference/is_post_type_hierarchical" title="Function Reference/is post type hierarchical"> is_post_type_hierarchical()</a>, 
<a href="/Function_Reference/is_post_type_archive" title="Function Reference/is post type archive"> is_post_type_archive()</a>, 
<a href="/Function_Reference/post_type_archive_title" title="Function Reference/post type archive title"> post_type_archive_title()</a>
</p>
<div style="clear:both; background-color:#F7F7F7; border:1px solid #CCCCCC; color:#000000; padding:7px; margin:0.5em auto 0.5em auto; vertical-align:middle;">See also index of <a href="/Function_Reference" title="Function Reference">Function Reference</a> and index of <a href="/Template_Tags" title="Template Tags">Template Tags</a>.</div></span>

<!-- 
NewPP limit report
Preprocessor node count: 492/1000000
Post-expand include size: 9865/2097152 bytes
Template argument size: 5528/2097152 bytes
Expensive parser function count: 0/100
-->
<div class="printfooter">
Retrieved from "<a href="http://codex.wordpress.org/Function_Reference/register_post_type">http://codex.wordpress.org/Function_Reference/register_post_type</a>"</div>
				<div id="catlinks"><div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/Special:Categories" title="Special:Categories">Category</a>:&#32;<span dir='ltr'><a href="/Category:Functions" title="Category:Functions">Functions</a></span></div></div></div>			<!-- end content -->
		</div>
		<div class="col-2">
			
						
			<ul class="submenu">
				<li id="n-mainpage"><a href="/Main_Page">Home Page</a></li>	
				<li><a href="/WordPress_Lessons">WordPress Lessons</a></li>
				<li><a href="/Getting_Started_with_WordPress">Getting Started</a></li>
				<li><a href="/Working_with_WordPress">Working with WordPress</a></li>
				<li><a href="/Blog_Design_and_Layout">Design and Layout</a></li>
				<li><a href="/Advanced_Topics">Advanced Topics</a></li>
				<li><a href="/Troubleshooting">Troubleshooting</a></li>
				<li><a href="/Developer_Documentation">Developer Docs</a></li>
				<li><a href="/About_WordPress">About WordPress</a></li>
			</ul>

			<h3>Codex Resources</h3>
			<ul class="submenu">
				<li id="n-portal"><a href="/Codex:Community_Portal">Community portal</a></li>	      
				<li id="n-currentevents"><a href="/Current_events">Current events</a></li>	      
				<li id="n-recentchanges"><a href="/Special:RecentChanges">Recent changes</a></li>	      
				<li id="n-randompage"><a href="/Special:Random">Random page</a></li>	      
				<li id="n-help"><a href="/Help:Contents">Help</a></li>	
			</ul>
			
		</div>
	</div>
</div>


<div id="footer">
	<div class="wrapper">
		<p> 
			<a href="http://wordpress.org/about/privacy/">Privacy</a> | 
			<a href="http://wordpress.org/about/license/">License / GPLv2</a>
            &nbsp; &nbsp; See also: 
            <a href="http://wordpress.com/?ref=wporg-footer" title="Hassle-free WP hosting">Hosted WordPress.com</a> |
			<a href="http://wordpress.tv/" title="Videos, tutorials, WordCamps">WordPress.TV Videos</a> |
			<a href="http://central.wordcamp.org/" title="Find a WordPress event near your home">WordCamp Events</a> |
			<a href="http://buddypress.org/" title="A set of plugins to transform your WordPress into a social network">BuddyPress Social Layer</a> |
			<a href="http://bbpress.org/" title="Fast, slick forums built on WordPress">bbPress Forums</a> |
			<a href="http://jobs.wordpress.net/" title="Find or post WordPress jobs">WP Jobs</a> | 
            <a href="http://ma.tt/" title="Co-founder of WordPress, an example of what WordPress can do">Matt</a>
		</p>
<br />
<iframe src="http://www.facebook.com/plugins/like.php?app_id=121415197926116&amp;href=http%3A%2F%2Fwww.facebook.com%2Fwordpress&amp;send=false&amp;layout=button_count&amp;width=150&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font=lucida+grande&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:150px; height:21px;" allowTransparency="true"></iframe>
<!-- <div class="g-plusone" data-size="medium" data-href="https://plus.google.com/107188080561309681193"></div> -->
<iframe allowtransparency="true" frameborder="0" scrolling="no" src="http://platform.twitter.com/widgets/follow_button.html?screen_name=WordPress&show_count=false" style="width:150px; height:20px;"></iframe>

		<h6>Code is Poetry</h6>
	</div>
</div>


<script type="text/javascript">_qoptions={qacct:"p-18-mFEk4J448M"};</script>
<script type="text/javascript" src="http://edge.quantserve.com/quant.js"></script>
<noscript><img src="http://pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif" style="display: none;" border="0" height="1" width="1" alt=""/></noscript>
<!--  -->
<script type="text/javascript" src="http://s.gravatar.com/js/gprofiles.js"></script>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
<script type="text/javascript">
(function($){
$(document).ready(function() {
	$('#footer a').click(function() {
		if (this.href.indexOf('wordpress.org') == -1 && this.href.indexOf('http') == 0) {
			recordOutboundLink(this, 'Outbound Links', this.href);
			return false;
		}
	});
});
})(jQuery);
</script>
</body>
<!-- Cached 20130416085135 -->
</html>

</body>
<!-- Cached 20130416085135 -->
</html>

