<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<!--
<meta property="fb:page_id" content="6427302910" />
-->
<meta name="google-site-verification" content="7VWES_-rcHBcmaQis9mSYamPfNwE03f4vyTj4pfuAw0" />
<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15.5" />
		<meta name="keywords" content="Function Reference/query posts,Class Reference/WP Query,Class Reference/wpdb,Custom Queries,Displaying Posts Using a Custom Select Query,Function Reference,Function Reference/get pages,Function Reference/get posts,Function Reference/get query var,Function Reference/have posts,Function Reference/is category" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Codex (en)" />
		<link rel="alternate" type="application/rss+xml" title="Codex RSS feed" href="/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="Codex Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<title>Function Reference/query posts &laquo; WordPress Codex</title>

<link rel="stylesheet" href="//wordpress.org/style/codex-wp4.css?3" />
<link href='//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,400,300,600&subset=latin,cyrillic-ext,greek-ext,greek,vietnamese,latin-ext,cyrillic' rel='stylesheet' type='text/css'>
<link rel="stylesheet" href="//wordpress.org/style/wp4.css?35" />
<link media="only screen and (max-device-width: 480px)" href="//wordpress.org/style/iphone.css" type="text/css" rel="stylesheet" />
<link rel="shortcut icon" href="//wordpress.org/favicon.ico?3" type="image/x-icon" />


<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-52447-1");
pageTracker._initData();
pageTracker._trackPageview();
function recordOutboundLink(link, category, action) {
  pageTracker._trackEvent(category, action);
  setTimeout('document.location = "' + link.href + '"', 100);
}
</script>
<!--[if lte IE 8]>
<style type="text/css">
@import url("//wordpress.org/style/ie.css?1");
</style>
<![endif]-->
	<script type="text/javascript" src="//wordpress.org/wp-includes/js/jquery/jquery.js"></script>
<script>document.cookie='devicePixelRatio='+((window.devicePixelRatio === undefined) ? 1 : window.devicePixelRatio)+'; path=/';</script>
<!--[if IE]>
    <script type="text/javascript" src="/skins/common/IEFixes.js"></script>
    <meta http-equiv="imagetoolbar" content="no" />
<![endif]-->

<script type="text/javascript" src="/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=codex"></script>
<script type="text/javascript">wgBreakFrames=false;wgContentLanguage='en';</script>
<script type="text/javascript" src="/skins/common/wikibits.js"></script>

</head>

<body id="wordpress-org"  >
<div id="header">
	<div class="wrapper">
		<h1><a href="//wordpress.org">WordPress.org</a></h1>				<div id="head-search">
		<form action="http://wordpress.org/search/do-search.php" method="get">
			<input class="text" name="search" type="text" value="" maxlength="150" placeholder="Search WordPress.org" /> <input type="submit" class="button" value="" />
		</form>
		</div>
				<div style="clear:both"></div>
		
<ul>
<li><a href='http://wordpress.org/showcase/' title='See some of the sites built on WordPress.'>Showcase</a></li>
<li><a href='http://wordpress.org/extend/themes/' title='Find just the right look for your website.'>Themes</a></li>
<li><a href='http://wordpress.org/extend/plugins/' title='Plugins can extend WordPress to do almost anything you can imagine.'>Plugins</a></li>
<li><a href='http://wordpress.org/extend/mobile/' title='Take your website on the go!'>Mobile</a></li>
<li><a href='http://wordpress.org/support/' title='Forums, documentation, help.' class="current">Support</a><ul class="nav-submenu"><li><a href='http://wordpress.org/support/' title='Support and discussion forums.'>Forums</a></li><li><a href='http://codex.wordpress.org/Main_Page' title='Documentation, tutorials, best practices.'>Documentation</a></li></ul><div class="uparrow"></div></li>
<li><a href='http://make.wordpress.org/' title='Contribute your knowledge.'>Get Involved</a><ul class="nav-submenu"><li><a href='http://make.wordpress.org/core/' title='Write the code.'>Core</a></li><li><a href='http://make.wordpress.org/ui/' title='Improve the interface.'>UI</a></li><li><a href='http://make.wordpress.org/accessibility/' title='Create a better experience.'>Accessibility</a></li><li><a href='http://make.wordpress.org/plugins/' title='Extend the system.'>Plugins</a></li><li><a href='http://make.wordpress.org/themes/' title='Beautify the web.'>Themes</a></li><li><a href='http://make.wordpress.org/support/' title='Help the users.'>Support</a></li><li><a href='http://make.wordpress.org/polyglots/' title='Translate for the world.'>Polyglots</a></li><li><a href='http://make.wordpress.org/mobile/' title='On the go.'>Mobile</a></li></ul><div class="uparrow"></div></li>
<li><a href='http://wordpress.org/about/' title='About the WordPress Organization, and where we&#039;re going.'>About</a></li>
<li><a href='http://wordpress.org/news/' title='Come here for the latest scoop.'>Blog</a></li>
<li><a href='http://wordpress.org/hosting/' title='Find a home for your blog.'>Hosting</a></li>
<li id="download" class="button download-button"><a href='http://wordpress.org/download/' title='Get it. Got it? Good.'>Download WordPress</a></li>
</ul>
		<div style="clear:both"></div>
	</div>
</div>


<div id="headline">
	<div class="wrapper">
		<h2>Codex</h2>
		
		<div class="portlet" id="p-personal">
		  <p class="login">Codex tools:
		     <a href="/index.php?title=Special:UserLogin&amp;returnto=Function_Reference/query_posts">Log in</a> 		  </p>
		</div>
	</div>
</div>

<div id="pagebody">
	<div class="wrapper">	
		<div class="col-10" id="bodyContent">
						<h2 class="pagetitle">Function Reference/query posts</h2>
									<!-- start content -->
				<p class="LanguageLinks" style="border:1px solid #CCCCCC; line-height:1.5; text-align:left; color:#333333; font-size:90%; padding:10px;"><span style="white-space:nowrap;"><a href="/Multilingual_Codex" title="Multilingual Codex" class="mw-redirect">Languages</a>:</span> 
<strong class="selflink">English</strong> • 
<a href="http://codex.cloux.it/Riferimento+funzioni%2Fquery+posts" class="external text" title="http://codex.cloux.it/Riferimento+funzioni%2Fquery+posts">Italiano</a> • 

<a href="http://wpdocs.sourceforge.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%BF%E3%82%B0/query_posts" class="external text" title="http://wpdocs.sourceforge.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%BF%E3%82%B0/query_posts">日本語</a> • 
<a href="/zh-cn:%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83/query_posts" title="zh-cn:函数参考/query posts">中文(简体)</a> • 
<a href="/pt-br:Refer%C3%AAncia_de_Fun%C3%A7%C3%A3o/query_posts" title="pt-br:Referência de Função/query posts" class="mw-redirect">Português do Brasil</a> • 

 <small>(<a href="/Multilingual_Codex#Language_Cross_Reference" title="Multilingual Codex" class="mw-redirect">Add your language</a>)</small>
</p>
<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Description"><span class="tocnumber">1</span> <span class="toctext">Description</span></a></li>
<li class="toclevel-1"><a href="#Caveats"><span class="tocnumber">2</span> <span class="toctext">Caveats</span></a>
<ul>
<li class="toclevel-2"><a href="#Alters_Main_Loop"><span class="tocnumber">2.1</span> <span class="toctext">Alters Main Loop</span></a></li>
<li class="toclevel-2"><a href="#Secondary_Loops"><span class="tocnumber">2.2</span> <span class="toctext">Secondary Loops</span></a></li>
<li class="toclevel-2"><a href="#Pagination"><span class="tocnumber">2.3</span> <span class="toctext">Pagination</span></a></li>
<li class="toclevel-2"><a href="#Additional_SQL_Queries"><span class="tocnumber">2.4</span> <span class="toctext">Additional SQL Queries</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Usage"><span class="tocnumber">3</span> <span class="toctext">Usage</span></a>
<ul>
<li class="toclevel-2"><a href="#Preserving_Existing_Query_Parameters"><span class="tocnumber">3.1</span> <span class="toctext">Preserving Existing Query Parameters</span></a></li>
<li class="toclevel-2"><a href="#Combining_Parameters"><span class="tocnumber">3.2</span> <span class="toctext">Combining Parameters</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Parameters"><span class="tocnumber">4</span> <span class="toctext">Parameters</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a>
<ul>
<li class="toclevel-2"><a href="#Exclude_Categories_From_Your_Home_Page"><span class="tocnumber">5.1</span> <span class="toctext">Exclude Categories From Your Home Page</span></a></li>
<li class="toclevel-2"><a href="#Retrieve_a_Particular_Post"><span class="tocnumber">5.2</span> <span class="toctext">Retrieve a Particular Post</span></a></li>
<li class="toclevel-2"><a href="#All_Posts_in_a_Category"><span class="tocnumber">5.3</span> <span class="toctext">All Posts in a Category</span></a></li>
<li class="toclevel-2"><a href="#Syndication_Feeds"><span class="tocnumber">5.4</span> <span class="toctext">Syndication Feeds</span></a></li>
<li class="toclevel-2"><a href="#Passing_variables_to_query_posts"><span class="tocnumber">5.5</span> <span class="toctext">Passing variables to query_posts</span></a>
<ul>
<li class="toclevel-3"><a href="#Example_1"><span class="tocnumber">5.5.1</span> <span class="toctext">Example 1</span></a></li>
<li class="toclevel-3"><a href="#Example_2"><span class="tocnumber">5.5.2</span> <span class="toctext">Example 2</span></a></li>
<li class="toclevel-3"><a href="#Example_3"><span class="tocnumber">5.5.3</span> <span class="toctext">Example 3</span></a></li>
<li class="toclevel-3"><a href="#Example_4"><span class="tocnumber">5.5.4</span> <span class="toctext">Example 4</span></a></li>
<li class="toclevel-3"><a href="#Example_5"><span class="tocnumber">5.5.5</span> <span class="toctext">Example 5</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Change_Log"><span class="tocnumber">6</span> <span class="toctext">Change Log</span></a></li>
<li class="toclevel-1"><a href="#Source_File"><span class="tocnumber">7</span> <span class="toctext">Source File</span></a></li>
<li class="toclevel-1"><a href="#Resources"><span class="tocnumber">8</span> <span class="toctext">Resources</span></a></li>
<li class="toclevel-1"><a href="#Related"><span class="tocnumber">9</span> <span class="toctext">Related</span></a></li>
</ul>
</td></tr></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Description" id="Description"></a><h2> <span class="mw-headline">Description</span></h2>
<p><tt>query_posts()</tt> is the easiest, but not preferred or most efficient, way to alter the main query that WordPress uses to display posts. It does this by putting the main query to one side, and replacing it with a new query. To clean up after a call to <tt>query_posts</tt>, make a call to <tt>wp_reset_query()</tt>, and the original main query will be restored.
</p><p>It is <i><b>strongly</b></i> recommended that you use the <a href="/Plugin_API/Action_Reference/pre_get_posts" title="Plugin API/Action Reference/pre get posts">pre_get_posts</a> action instead, and alter the main query by checking <a href="/Function_Reference/is_main_query" title="Function Reference/is main query">is_main_query</a>
</p><p>For example, on the homepage, you would normally see the latest 10 posts. If you want to show only 5 posts (and don't care about pagination), you can use query_posts() like so:
</p>
<pre>
query_posts( 'posts_per_page=5' );
</pre>
<p>Here is similar code using <a href="/Plugin_API/Action_Reference/pre_get_posts" title="Plugin API/Action Reference/pre get posts">pre_get_posts</a> in functions.php&nbsp;:
</p>
<pre>
function five_posts_on_homepage( $query ) {
    if ( $query-&gt;is_home() &amp;&amp; $query-&gt;is_main_query() ) {
        $query-&gt;set( 'posts_per_page', '5' );
    }
}
add_action( 'pre_get_posts', 'five_posts_on_homepage' );
</pre>
<p><b>Note</b>: The pre_get_posts action doesn't work for <a href="/Pages" title="Pages">Page</a> requests.
</p>
<a name="Caveats" id="Caveats"></a><h2> <span class="mw-headline">Caveats</span></h2>
<p><tt>query_posts()</tt> is only one way amongst many to query the database and generate a list of posts. Before deciding to use <tt>query_posts()</tt>, be sure to understand the drawbacks.
</p>
<a name="Alters_Main_Loop" id="Alters_Main_Loop"></a><h3> <span class="mw-headline">Alters Main Loop</span></h3>
<p><tt>query_posts()</tt> is meant for altering the main loop. It does so by replacing the query used to generate the main loop content. Once you use <tt>query_posts()</tt>, your post-related global variables and template tags will be altered. Conditional tags that are called after you call <tt>query_posts()</tt> will also be altered - this may or may not be the intended result.
</p>
<a name="Secondary_Loops" id="Secondary_Loops"></a><h3> <span class="mw-headline">Secondary Loops</span></h3>
<p>To create secondary listings (for example, a list of related posts at the bottom of the page, or a list of links in a sidebar widget), try making a new instance of <a href="/Class_Reference/WP_Query" title="Class Reference/WP Query">WP_Query</a> or use <a href="/Function_Reference/get_posts" title="Function Reference/get posts" class="mw-redirect">get_posts()</a>.
</p><p>If you must use <tt>query_posts()</tt>, make sure you call <tt>wp_reset_query()</tt> after you're done.
</p>
<a name="Pagination" id="Pagination"></a><h3> <span class="mw-headline">Pagination</span></h3>
<p>Pagination won't work correctly, unless you set the 'paged' query var appropriately: <a href="/Pagination#Adding_the_.22paged.22_parameter_to_a_query" title="Pagination">adding the paged parameter</a>
</p>
<a name="Additional_SQL_Queries" id="Additional_SQL_Queries"></a><h3> <span class="mw-headline">Additional SQL Queries</span></h3>
<p>If you use <tt>query_posts</tt> within a template page, WordPress will have already executed the database query and retrieved the records by the time it gets to your template page (that's how it knew which template page to serve up!). So when you over-ride the default query with <tt>query_posts()</tt>, you're essentially throwing away the default query and its results and re-executing another query against the database.
</p><p>This is not necessarily a problem, especially if you're dealing with a smaller blog-based site. Developers of large sites with big databases and heavy visitor traffic may wish to consider alternatives, such as modifying the default request directly (before it's called). The <a href="/Plugin_API/Filter_Reference/request" title="Plugin API/Filter Reference/request">request</a> filter can be used to achieve exactly this.
</p><p>The 'parse_query' and the '<a href="/Plugin_API/Action_Reference/pre_get_posts" title="Plugin API/Action Reference/pre get posts">pre_get_posts</a>' filters are also available to modify the internal $query object that is used to generate the SQL to query the database.
</p>
<a name="Usage" id="Usage"></a><h2> <span class="mw-headline">Usage</span></h2>
<p><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;The&nbsp;Query<br /></span><span style="color: #0000BB">query_posts</span><span style="color: #007700">(&nbsp;</span><span style="color: #0000BB">$args&nbsp;</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;The&nbsp;Loop<br /></span><span style="color: #007700">while&nbsp;(&nbsp;</span><span style="color: #0000BB">have_posts</span><span style="color: #007700">()&nbsp;)&nbsp;:&nbsp;</span><span style="color: #0000BB">the_post</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'&lt;li&gt;'</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">the_title</span><span style="color: #007700">();<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">'&lt;/li&gt;'</span><span style="color: #007700">;<br />endwhile;<br /><br /></span><span style="color: #FF8000">//&nbsp;Reset&nbsp;Query<br /></span><span style="color: #0000BB">wp_reset_query</span><span style="color: #007700">();<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code>
Place a call to <tt>query_posts()</tt> in one of your <a href="/Templates" title="Templates">Template</a> files before <a href="/The_Loop" title="The Loop">The Loop</a> begins. The <tt>wp_query</tt> object will generate a new SQL query using your parameters. When you do this, WordPress ignores the other parameters it receives via the URL (such as page number or category). 
</p>
<a name="Preserving_Existing_Query_Parameters" id="Preserving_Existing_Query_Parameters"></a><h3> <span class="mw-headline">Preserving Existing Query Parameters</span></h3>
<p>If you want to preserve the original query parameter information that was used to generate the current query, and then add or over-ride some parameters, you can use the <tt>$query_string</tt> global variable in the call to <tt>query_posts()</tt>.
</p><p>For example, to set the display order of the posts without affecting the rest of the query string, you could place the following before <a href="/The_Loop" title="The Loop">The Loop</a>:
</p>
<pre>
global $query_string;
query_posts( $query_string . '&amp;order=ASC' );
</pre>
<p>When using <tt>query_posts()</tt> in this way, the quoted portion of the parameter <i>must</i> begin with an ampersand (&amp;).
</p><p>Or alternatively, you can merge the original query array into your parameter array:
</p>
<pre>
global $wp_query;
$args = array_merge( $wp_query-&gt;query_vars, array( 'post_type' =&gt; 'product' ) );
query_posts( $args );
</pre>
<a name="Combining_Parameters" id="Combining_Parameters"></a><h3> <span class="mw-headline">Combining Parameters</span></h3>
<p>You may have noticed from some of the examples above that you combine parameters with an ampersand (&amp;), like so: 
</p>
<pre>
query_posts( 'cat=3&amp;year=2004' );
</pre>
<p>Posts for category 13, for the current month on the main page:
</p>
<pre>
if ( is_home() ) {
	query_posts( $query_string . '&amp;cat=13&amp;monthnum=' . date( 'n', current_time( 'timestamp' ) ) );
}
</pre>
<p>At 2.3 this combination will return posts belong to both Category 1 AND 3, showing just two (2) posts, in descending order by the title:
</p>
<pre>
query_posts( array( 'category__and' =&gt; array(1,3), 'posts_per_page' =&gt; 2, 'orderby' =&gt; 'title', 'order' =&gt; 'DESC' ) );
</pre>
<p>The following returns all posts that belong to category 1 and are tagged "apples"
</p>
<pre>
query_posts( 'cat=1&amp;tag=apples' );
</pre>
<p>You can search for several tags using +
</p>
<pre>
query_posts( 'cat=1&amp;tag=apples+apples' );
</pre>
<a name="Parameters" id="Parameters"></a><h2> <span class="mw-headline">Parameters</span></h2>
<p><b>Note:</b> Parameter details can be found in the <a href="/Class_Reference/WP_Query#Parameters" title="Class Reference/WP Query">Parameter section of the WP_Query class article</a>.
</p><p>The examples below also work with the WP_Query object.
</p>
<a name="Examples" id="Examples"></a><h2> <span class="mw-headline">Examples</span></h2>
<a name="Exclude_Categories_From_Your_Home_Page" id="Exclude_Categories_From_Your_Home_Page"></a><h3> <span class="mw-headline">Exclude Categories From Your Home Page</span></h3>
<p>Placing this code in <tt>index.php</tt> file will cause the home page to display posts from all categories <i>except</i> category ID 3.
</p>
<pre>
&lt;?php
if ( is_home() ) {
	query_posts( 'cat=-3' );
}
?&gt;
</pre>
<p>You can also add some more categories to the exclude-list (tested with WP 3.3.1):
</p>
<pre>
&lt;?php
if ( is_home() ) {
	query_posts( 'cat=-1,-2,-3' );
}
?&gt;
</pre>
<a name="Retrieve_a_Particular_Post" id="Retrieve_a_Particular_Post"></a><h3> <span class="mw-headline">Retrieve a Particular Post</span></h3>
<p>To retrieve a particular post, you could use the following:
</p>
<pre>
query_posts( 'p=5' );
</pre>
<p><b>Note:</b> If the particular post is an attachment, you have to use <i>attachment_id</i> instead of <i>p</i>:
</p>
<pre>
query_posts( 'attachment_id=5' );
</pre>
<p>If you want to use the <i>Read More</i> functionality with this query, you will need to set the global <tt>$more</tt> variable to 0.
</p>
<pre>
&lt;?php
// retrieve one post with an ID of 5
query_posts( 'p=5' );

// set $more to 0 in order to only get the first part of the post
global $more;
$more = 0;

// the Loop
while (have_posts())&nbsp;: the_post();
	the_content( 'Read the full post &raquo;' );
endwhile;
?&gt;
</pre>
<a name="All_Posts_in_a_Category" id="All_Posts_in_a_Category"></a><h3> <span class="mw-headline">All Posts in a Category</span></h3>
<p>The "Blog pages show at most" parameter in Settings &gt; Reading can influence your results.  To overcome this, add the 'posts_per_page' parameter.  For example:
</p>
<pre>
query_posts( array ( 'category_name' =&gt; 'my-category-slug', 'posts_per_page' =&gt; -1 ) );
</pre>
<p>This will returns ALL posts from the category.
</p><p>However, for subcategories (or child categories), 'The Category Name' doesn't always work. Rather use 'category-slug' instead. See <a href="/Function_Reference/is_category" title="Function Reference/is category">Function_Reference/is_category</a>.
</p>
<pre>
if (is_category('category-slug')): 

	 query_posts(array('category_name' =&gt; 'my-category-slug', 'posts_per_page' =&gt; -1 )); 

endif; 
</pre>
<a name="Syndication_Feeds" id="Syndication_Feeds"></a><h3> <span class="mw-headline">Syndication Feeds</span></h3>
<p>The "Syndication feeds show the most recent" or '<tt>posts_per_rss</tt>' parameters in Settings &gt; Reading will overwrite any '<tt>posts_per_page</tt>' parameter in a query used in a feed.
</p><p>To overcome use (for example in a a custom ics feed, where all matching posts are required), use the "posts_limit" filter as follows:
</p>
<pre>
if ( isset ( $query-&gt;query_vars['feed'] ) and ( $query-&gt;query_vars['feed'] == 'ics' ) )
{
	add_filter( 'post_limits', '__return_empty' );
}
</pre>
<a name="Passing_variables_to_query_posts" id="Passing_variables_to_query_posts"></a><h3> <span class="mw-headline">Passing variables to query_posts</span></h3>
<p>You can pass a variable to the query with two methods, depending on your needs. As with other examples, place these above your Loop:
</p>
<a name="Example_1" id="Example_1"></a><h4> <span class="mw-headline"> Example 1  </span></h4>
<p>In this example, we concatenate the query before running it. First assign the variable, then concatenate and then run it. Here we're pulling in a category variable from elsewhere. 
</p>
<pre>
// assign the variable as current category
$categoryvariable = $cat;

// concatenate the query
$args = 'cat=' . $categoryvariable . '&amp;orderby=date&amp;order=ASC';

// run the query
query_posts( $args );
</pre>
<a name="Example_2" id="Example_2"></a><h4> <span class="mw-headline"> Example 2 </span></h4>
<p>In this next example, the double quotes tell PHP to treat the enclosed as an expression. For this example, we are getting the current month and the current year, and telling <tt>query_posts()</tt> to bring us the posts for the current month/year, and in this case, listing in ascending order so we get the oldest post at the top of the page. 
</p>
<pre>
$current_year = date('Y');
$current_month = date('m');

query_posts( &quot;cat=22&amp;year=$current_year&amp;monthnum=$current_month&amp;order=ASC&quot; );
</pre>
<a name="Example_3" id="Example_3"></a><h4> <span class="mw-headline"> Example 3 </span></h4>
<p>This example explains how to generate a complete list of posts, dealing with pagination. We can use the default <tt>$query_string</tt> telling <tt>query_posts()</tt> to bring us a full posts listing.  We can also modify the <tt>posts_per_page</tt> query parameter from -1 to the number of posts you want to show on each page; in this last case, you'll probably want to use <a href="/Template_Tags/posts_nav_link" title="Template Tags/posts nav link" class="mw-redirect">posts_nav_link()</a> to navigate the generated archive.
</p>
<pre>
query_posts( $query_string . '&amp;posts_per_page=-1' );
</pre>
<a name="Example_4" id="Example_4"></a><h4> <span class="mw-headline"> Example 4 </span></h4>
<p>If you don't need to use the <tt>$query_string</tt> variable, another method exists that is more clear and readable, in some more complex cases. This method puts the parameters into an array. The same query as in Example 2 above could be done like this:
</p>
<pre>
$args = array(
	'cat'      =&gt; 22,
	'year'     =&gt; $current_year,
	'monthnum' =&gt; $current_month,
	'order'    =&gt; 'ASC'
);
query_posts( $args );
</pre>
<p>As you can see, with this approach, every variable can be put on its own line, for easier reading.
</p>
<a name="Example_5" id="Example_5"></a><h4> <span class="mw-headline"> Example 5 </span></h4>
<p>It is even possible to use the array style (Example 4) to query multiple taxonomies. Simply supply the taxonomy slug with a string of comma-separated values (each value being one term). In the example below, we will get all movie posts starring either Bruce Campbell <i>or</i> Chuck Norris.
</p>
<pre>
$args = array(
	'post_type'=&gt; 'movie',
	'actor'    =&gt; 'Bruce Campbell, Chuck Norris',
	'order'    =&gt; 'ASC'
);
query_posts( $args );
</pre>
<a name="Change_Log" id="Change_Log"></a><h2> <span class="mw-headline"> Change Log </span></h2>
<p>Since: <a href="/Version_1.5" title="Version 1.5">1.5.0</a>
</p>
<a name="Source_File" id="Source_File"></a><h2> <span class="mw-headline">Source File</span></h2>
<p><tt>query_posts()</tt> is located in <code><a href="http://core.trac.wordpress.org/browser/trunk/wp-includes/query.php#L89" class="external text" title="http://core.trac.wordpress.org/browser/trunk/wp-includes/query.php#L89">wp-includes/query.php</a></code>.
</p>
<a name="Resources" id="Resources"></a><h2> <span class="mw-headline">Resources</span></h2>
<ul><li>For more in-depth discussion of how WordPress generates and handles its queries, review these articles: <a href="/Query_Overview" title="Query Overview">Query Overview</a> and <a href="/Custom_Queries" title="Custom Queries">Custom Queries</a>
</li><li>Customize the Default Query properly using 'pre_get_posts' - <a href="http://www.billerickson.net/customize-the-wordpress-query/#example-category" class="external text" title="http://www.billerickson.net/customize-the-wordpress-query/#example-category">Bill Erickson - Customize the Wordpress Query</a> or <a href="http://developer.wordpress.com/2012/05/14/querying-posts-without-query_posts/" class="external text" title="http://developer.wordpress.com/2012/05/14/querying-posts-without-query_posts/">John James Jacoby - Querying Posts Without query_posts</a>
</li><li>You don't know Query <a href="http://www.slideshare.net/andrewnacin/you-dont-know-query-wordcamp-netherlands-2012" class="external text" title="http://www.slideshare.net/andrewnacin/you-dont-know-query-wordcamp-netherlands-2012">- Slides from WordCamp Netherlands 2012 by Andrew Nacin</a>
</li></ul>
<a name="Related" id="Related"></a><h2> <span class="mw-headline">Related</span></h2>
<ul><li> Class: <a href="/Class_Reference/WP_Query" title="Class Reference/WP Query"> WP_Query</a> - Detailed overview of the WP_Query class
</li><li> Class: <a href="/Class_Reference/wpdb" title="Class Reference/wpdb">$wpdb</a> - Overview of using the $wpdb object
</li><li> Function: <a href="/Function_Reference/get_query_var" title="Function Reference/get query var"> get_query_var()</a> 
</li><li> Function: <strong class="selflink"> query_posts()</strong>  - Make additional custom queries
</li><li> Function: <a href="/Function_Reference/get_posts" title="Function Reference/get posts" class="mw-redirect">get_posts()</a> - A specialized function that returns an array of posts
</li><li> Function: <a href="/Function_Reference/get_pages" title="Function Reference/get pages">get_pages()</a> - A specialized function that returns an array of pages
</li><li> Function: <a href="/Function_Reference/have_posts" title="Function Reference/have posts"> have posts()</a> - A conditional that determines if the query returned any posts
</li><li> Function: <a href="/Function_Reference/the_post" title="Function Reference/the post"> the_post()</a> - Used to automatically set up the loop after a query
</li><li> Function: <a href="/Function_Reference/rewind_posts" title="Function Reference/rewind posts"> rewind_posts()</a> - Resets the current loop
</li><li> Function: <a href="/Function_Reference/setup_postdata" title="Function Reference/setup postdata">setup_postdata()</a> - Setup query data for individual results within a loop
</li><li> Function: <a href="/Function_Reference/wp_reset_postdata" title="Function Reference/wp reset postdata"> wp_reset_postdata()</a> - Restores the previous query (usually after a loop-within-a-loop)
</li><li> Function: <a href="/Function_Reference/wp_reset_query" title="Function Reference/wp reset query"> wp_reset_query()</a>
</li><li> Function: <a href="/Function_Reference/is_main_query" title="Function Reference/is main query">is_main_query()</a> - Ensures the query being changed is only the main query
</li><li> Action Hook: <a href="/Plugin_API/Action_Reference/pre_get_posts" title="Plugin API/Action Reference/pre get posts">pre_get_posts</a> - Modify WordPress queries before they are executed
</li><li> Filter Hook: <a href="/Plugin_API/Filter_Reference/found_posts" title="Plugin API/Filter Reference/found posts">found_posts</a> - Modify the WP_Query object's found_posts value
</li><li> Tutorial: <a href="/Displaying_Posts_Using_a_Custom_Select_Query" title="Displaying Posts Using a Custom Select Query">Displaying Posts Using a Custom Select Query</a>
</li><li> Tutorial: <a href="/Making_Advanced_Taxonomy_Queries" title="Making Advanced Taxonomy Queries">Making Advanced Taxonomy Queries</a>
</li><li> Tutorial: <a href="/Making_Custom_Queries_using_Offset_and_Pagination" title="Making Custom Queries using Offset and Pagination">Making Custom Queries using Offset and Pagination</a>
</li></ul>
<div style="clear:both; background-color:#F7F7F7; border:1px solid #CCCCCC; color:#000000; padding:7px; margin:0.5em auto 0.5em auto; vertical-align:middle;">See also index of <a href="/Function_Reference" title="Function Reference">Function Reference</a> and index of <a href="/Template_Tags" title="Template Tags">Template Tags</a>.</div>

<!-- 
NewPP limit report
Preprocessor node count: 194/1000000
Post-expand include size: 3586/2097152 bytes
Template argument size: 714/2097152 bytes
Expensive parser function count: 0/100
-->
<div class="printfooter">
Retrieved from "<a href="http://codex.wordpress.org/Function_Reference/query_posts">http://codex.wordpress.org/Function_Reference/query_posts</a>"</div>
				<div id="catlinks"><div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/Special:Categories" title="Special:Categories">Category</a>:&#32;<span dir='ltr'><a href="/Category:Template_Tags" title="Category:Template Tags">Template Tags</a></span></div></div></div>			<!-- end content -->
		</div>
		<div class="col-2">
			
						
			<ul class="submenu">
				<li id="n-mainpage"><a href="/Main_Page">Home Page</a></li>	
				<li><a href="/WordPress_Lessons">WordPress Lessons</a></li>
				<li><a href="/Getting_Started_with_WordPress">Getting Started</a></li>
				<li><a href="/Working_with_WordPress">Working with WordPress</a></li>
				<li><a href="/Blog_Design_and_Layout">Design and Layout</a></li>
				<li><a href="/Advanced_Topics">Advanced Topics</a></li>
				<li><a href="/Troubleshooting">Troubleshooting</a></li>
				<li><a href="/Developer_Documentation">Developer Docs</a></li>
				<li><a href="/About_WordPress">About WordPress</a></li>
			</ul>

			<h3>Codex Resources</h3>
			<ul class="submenu">
				<li id="n-portal"><a href="/Codex:Community_Portal">Community portal</a></li>	      
				<li id="n-currentevents"><a href="/Current_events">Current events</a></li>	      
				<li id="n-recentchanges"><a href="/Special:RecentChanges">Recent changes</a></li>	      
				<li id="n-randompage"><a href="/Special:Random">Random page</a></li>	      
				<li id="n-help"><a href="/Help:Contents">Help</a></li>	
			</ul>
			
		</div>
	</div>
</div>


<div id="footer">
	<div class="wrapper">
		<p> 
			<a href="http://wordpress.org/about/privacy/">Privacy</a> | 
			<a href="http://wordpress.org/about/license/">License / GPLv2</a>
            &nbsp; &nbsp; See also: 
            <a href="http://wordpress.com/?ref=wporg-footer" title="Hassle-free WP hosting">Hosted WordPress.com</a> |
			<a href="http://wordpress.tv/" title="Videos, tutorials, WordCamps">WordPress.TV Videos</a> |
			<a href="http://central.wordcamp.org/" title="Find a WordPress event near your home">WordCamp Events</a> |
			<a href="http://buddypress.org/" title="A set of plugins to transform your WordPress into a social network">BuddyPress Social Layer</a> |
			<a href="http://bbpress.org/" title="Fast, slick forums built on WordPress">bbPress Forums</a> |
			<a href="http://jobs.wordpress.net/" title="Find or post WordPress jobs">WP Jobs</a> | 
            <a href="http://ma.tt/" title="Co-founder of WordPress, an example of what WordPress can do">Matt</a>
		</p>
<br />
<iframe src="http://www.facebook.com/plugins/like.php?app_id=121415197926116&amp;href=http%3A%2F%2Fwww.facebook.com%2Fwordpress&amp;send=false&amp;layout=button_count&amp;width=150&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font=lucida+grande&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:150px; height:21px;" allowTransparency="true"></iframe>
<!-- <div class="g-plusone" data-size="medium" data-href="https://plus.google.com/107188080561309681193"></div> -->
<iframe allowtransparency="true" frameborder="0" scrolling="no" src="http://platform.twitter.com/widgets/follow_button.html?screen_name=WordPress&show_count=false" style="width:150px; height:20px;"></iframe>

		<h6>Code is Poetry</h6>
	</div>
</div>


<script type="text/javascript">_qoptions={qacct:"p-18-mFEk4J448M"};</script>
<script type="text/javascript" src="http://edge.quantserve.com/quant.js"></script>
<noscript><img src="http://pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif" style="display: none;" border="0" height="1" width="1" alt=""/></noscript>
<!--  -->
<script type="text/javascript" src="http://s.gravatar.com/js/gprofiles.js"></script>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
<script type="text/javascript">
(function($){
$(document).ready(function() {
	$('#footer a').click(function() {
		if (this.href.indexOf('wordpress.org') == -1 && this.href.indexOf('http') == 0) {
			recordOutboundLink(this, 'Outbound Links', this.href);
			return false;
		}
	});
});
})(jQuery);
</script>
</body>
<!-- Cached 20130501091245 -->
</html>

</body>
<!-- Cached 20130501091245 -->
</html>

